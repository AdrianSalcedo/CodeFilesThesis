real R = y[3];
real N = x_i[1];
real beta = theta[1];
real gamma = theta[2];
real dS_dt = -beta * I * S / N;
real dI_dt =  beta * I * S / N - gamma * I;
real dR_dt =  gamma * I;
return {dS_dt, dI_dt, dR_dt};
}
}
data {
int<lower=1> n_days;
real y0[3];
real t0;
real ts[n_days];
int N;
int cases[n_days];
}
transformed data {
real x_r[0];
int x_i[1] = { N };
}
parameters {
real<lower=0> gamma;
real<lower=0> beta;
real<lower=0> phi_inv;
}
transformed parameters{
real y[n_days, 3];
real phi = 1. / phi_inv;
{
real theta[2];
theta[1] = beta;
theta[2] = gamma;
y = integrate_ode_rk45(sir, y0, t0, ts, theta, x_r, x_i);
}
}
model {
//priors
beta ~ normal(2, 1);
gamma ~ normal(0.4, 0.5);
phi_inv ~ exponential(5);
//sampling distribution
//col(matrix x, int n) - The n-th column of matrix x. Here the number of infected people
cases ~ neg_binomial_2(col(to_matrix(y), 2), phi);
}
generated quantities {
real R0 = beta / gamma;
real recovery_time = 1 / gamma;
real pred_cases[n_days];
pred_cases = neg_binomial_2_rng(col(to_matrix(y), 2), phi);
}
generated quantities{
real R0 = beta / gamma;
real recovery_time = 1 / gamma;
real pred_cases[n_days];
pred_cases = neg_binomial_2_rng(col(to_matrix(y), 2), phi);
}
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
#Data
library(outbreaks)
library(tidyverse)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
#Coding the Model: Stan Program
library(rstan)
library(gridExtra)
rstan_options (auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
#Coding the ODE in Stan
#real[] f(real time, real[] state, real[] theta, real[] x_r, int[] x_i)
functions {
real switch_eta(real t, real t1, real eta, real nu, real xi) {
return(eta + (1 - eta) / (1 + exp(xi * (t - t1 - nu))));
}
real[] sir(real t, real[] y, real[] theta,
real[] x_r, int[] x_i) {
int N = x_i[1];
real tswitch = x_r[1];
real beta = theta[1];
real gamma = theta[2];
real a = theta[3];
real eta = theta[4]; // reduction in transmission rate after quarantine
real nu = theta[5]; // shift of quarantine implementation
real xi = theta[6]; // slope of quarantine implementation
real i0 = theta[7]; // initial number of infected people
real e0 = theta[8]; // initial number of infected people
real forcing_function = switch_eta(t,tswitch,eta,nu,xi); // switch function
real beta_eff = beta * forcing_function; // beta decreased to take control measures into account
real init[4] = {N - i0 - e0, e0, i0, 0}; // initial values
real S = y[1] + init[1];
real E = y[2] + init[2];
real I = y[3] + init[3];
real R = y[4] + init[4];
real dS_dt = -beta_eff * I * S / N;
real dE_dt =  beta_eff * I * S / N - a * E;
real dI_dt = a * E - gamma * I;
real dR_dt =  gamma * I;
return {dS_dt, dE_dt, dI_dt, dR_dt};
}
}
data {
int<lower=1> n_days;
real t0;
real tswitch; // date of introduction of control measures
real ts[n_days];
int N; // population size
int cases[n_days];
int t_survey_start; // antibody survey data
int t_survey_end;
int n_infected_survey;
int n_tested_survey;
}
transformed data {
int x_i[1] = { N }; //formatting to feed the ODE function
real x_r[1] = {tswitch};
}
parameters {
real<lower=0> gamma; // SEIR parameters
real<lower=0> beta;
real<lower=0> a;
real<lower=0> phi_inv;
real<lower=0,upper=1> eta; // reduction in transmission due to control measures (in proportion of beta)
real<lower=0> nu; // shift of quarantine implementation (strictly positive as it can only occur after tswitch)
real<lower=0,upper=1> xi_raw; // slope of quarantine implementation (strictly positive as the logistic must be downward)
real<lower=0> i0; // number of infected people inititally
real<lower=0> e0; // number of exposed people inititally
real<lower=0, upper=1> p_reported; // probability for an infected person to be reported (i.e counted as a case)
}
transformed parameters{
real y[n_days, 4];
real incidence[n_days - 1];
real phi = 1. / phi_inv;
real xi = xi_raw + 0.5;
real theta[8];
real<lower=0, upper=1> p_infected_survey; //proportion of people having been infected at week 5 (between 4 and 7 may)
theta = {beta, gamma, a, eta, nu, xi, i0, e0};
y = integrate_ode_rk45(sir, rep_array(0.0, 4), t0, ts, theta, x_r, x_i);
for (i in 1:n_days-1){
incidence[i] = -(y[i+1, 2] - y[i, 2] + y[i+1, 1] - y[i, 1]) * p_reported; //-(E(t+1) - E(t) + S(t+1) - S(t))
}
// mean number of infected + recovered people during week 5
p_infected_survey = mean(to_vector(y[t_survey_start:t_survey_end, 4])) / N;
}
model {
//priors
beta ~ normal(2, 1);
gamma ~ normal(0.4, 0.5);
a ~ normal(0.4, 0.5);
phi_inv ~ exponential(5);
i0 ~ normal(0, 10);
e0 ~ normal(0, 10);
p_reported ~ beta(1, 2);
eta ~ beta(2.5, 4);
nu ~ exponential(1./5);
xi_raw ~ beta(1, 1);
//sampling distribution
n_infected_survey ~ binomial(n_tested_survey, p_infected_survey); // we fit the survey data to our latent parameter
//col(matrix x, int n) - The n-th column of matrix x. Here the number of infected people
cases[1:(n_days-1)] ~ neg_binomial_2(incidence, phi);
}
generated quantities {
real R0 = beta / gamma;
real Reff[n_days]; // R0 but taking into account environmental changes
real recovery_time = 1 / gamma;
real incubation_time = 1 / a;
real pred_cases[n_days-1];
pred_cases = neg_binomial_2_rng(incidence, phi);
for (i in 1:n_days)
Reff[i] = switch_eta(i, tswitch, eta, nu, xi) * beta / gamma;
}
rstan:::rstudio_stanc("Documentos/sier.stan")
rstan:::rstudio_stanc("Documentos/sier.stan")
#Data
library(outbreaks)
library(tidyverse)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
#Coding the Model: Stan Program
library(rstan)
library(gridExtra)
rstan_options (auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
#Coding the ODE in Stan
#real[] f(real time, real[] state, real[] theta, real[] x_r, int[] x_i)
functions {
real switch_eta(real t, real t1, real eta, real nu, real xi) {
return(eta + (1 - eta) / (1 + exp(xi * (t - t1 - nu))));
}
real[] sir(real t, real[] y, real[] theta,
real[] x_r, int[] x_i) {
int N = x_i[1];
real tswitch = x_r[1];
real beta = theta[1];
real gamma = theta[2];
real a = theta[3];
real eta = theta[4]; // reduction in transmission rate after quarantine
real nu = theta[5]; // shift of quarantine implementation
real xi = theta[6]; // slope of quarantine implementation
real i0 = theta[7]; // initial number of infected people
real e0 = theta[8]; // initial number of infected people
real forcing_function = switch_eta(t,tswitch,eta,nu,xi); // switch function
real beta_eff = beta * forcing_function; // beta decreased to take control measures into account
real init[4] = {N - i0 - e0, e0, i0, 0}; // initial values
real S = y[1] + init[1];
real E = y[2] + init[2];
real I = y[3] + init[3];
real R = y[4] + init[4];
real dS_dt = -beta_eff * I * S / N;
real dE_dt =  beta_eff * I * S / N - a * E;
real dI_dt = a * E - gamma * I;
real dR_dt =  gamma * I;
return {dS_dt, dE_dt, dI_dt, dR_dt};
}
}
data {
int<lower=1> n_days;
real t0;
real tswitch; // date of introduction of control measures
real ts[n_days];
int N; // population size
int cases[n_days];
int t_survey_start; // antibody survey data
int t_survey_end;
int n_infected_survey;
int n_tested_survey;
}
transformed data {
int x_i[1] = { N }; //formatting to feed the ODE function
real x_r[1] = {tswitch};
}
parameters {
real<lower=0> gamma; // SEIR parameters
real<lower=0> beta;
real<lower=0> a;
real<lower=0> phi_inv;
real<lower=0,upper=1> eta; // reduction in transmission due to control measures (in proportion of beta)
real<lower=0> nu; // shift of quarantine implementation (strictly positive as it can only occur after tswitch)
real<lower=0,upper=1> xi_raw; // slope of quarantine implementation (strictly positive as the logistic must be downward)
real<lower=0> i0; // number of infected people inititally
real<lower=0> e0; // number of exposed people inititally
real<lower=0, upper=1> p_reported; // probability for an infected person to be reported (i.e counted as a case)
}
transformed parameters{
real y[n_days, 4];
real incidence[n_days - 1];
real phi = 1. / phi_inv;
real xi = xi_raw + 0.5;
real theta[8];
real<lower=0, upper=1> p_infected_survey; //proportion of people having been infected at week 5 (between 4 and 7 may)
theta = {beta, gamma, a, eta, nu, xi, i0, e0};
y = integrate_ode_rk45(sir, rep_array(0.0, 4), t0, ts, theta, x_r, x_i);
for (i in 1:n_days-1){
incidence[i] = -(y[i+1, 2] - y[i, 2] + y[i+1, 1] - y[i, 1]) * p_reported; //-(E(t+1) - E(t) + S(t+1) - S(t))
}
// mean number of infected + recovered people during week 5
p_infected_survey = mean(to_vector(y[t_survey_start:t_survey_end, 4])) / N;
}
model {
//priors
beta ~ normal(2, 1);
gamma ~ normal(0.4, 0.5);
a ~ normal(0.4, 0.5);
phi_inv ~ exponential(5);
i0 ~ normal(0, 10);
e0 ~ normal(0, 10);
p_reported ~ beta(1, 2);
eta ~ beta(2.5, 4);
nu ~ exponential(1./5);
xi_raw ~ beta(1, 1);
//sampling distribution
n_infected_survey ~ binomial(n_tested_survey, p_infected_survey); // we fit the survey data to our latent parameter
//col(matrix x, int n) - The n-th column of matrix x. Here the number of infected people
cases[1:(n_days-1)] ~ neg_binomial_2(incidence, phi);
}
generated quantities {
real R0 = beta / gamma;
real Reff[n_days]; // R0 but taking into account environmental changes
real recovery_time = 1 / gamma;
real incubation_time = 1 / a;
real pred_cases[n_days-1];
pred_cases = neg_binomial_2_rng(incidence, phi);
for (i in 1:n_days)
Reff[i] = switch_eta(i, tswitch, eta, nu, xi) * beta / gamma;
}
rstan:::rstudio_stanc("Documentos/sir_example.stan")
library(deSolve)
library(dplyr)
library(rstan)
library(outbreaks)
library(bayesplot)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
rstan:::rstudio_stanc("Documentos/sir_example.stan")
? .standard_regexps
?sampling
library("rstan")
?sampling
load("~/Documentos/TYLCVD-fit/model3/df_I_det_Poiss.Rda")
View(df_fit_I_1)
View(df_fit_I_1)
load("~/Documentos/TYLCVD-fit/model3/runs/run-2022-05-06_13_45.RData")
View(nuts_fit)
View(nuts_fit)
nuts_fit@inits[[1]][["y_hat"]]
nuts_fit@inits[[1]][["y_hat"]][7]
nuts_fit@inits[[1]][["y_hat"]][8]
nuts_fit@inits[[1]][["y_hat"]][,8]
nuts_fit@inits[[1]][["y_hat"]][,7]
setwd("~/Documentos/TYLCVD-fit/model3")
library(deSolve)
library(dplyr)
library(rstan)
library(gridExtra)
library(outbreaks)
library(bayesplot)
library(data.table)
library(knitr)
library(kableExtra)
library(tidyverse)
#source("load_data.R")
source("init_SIR.R")
source("mcmc_stain_summary.R")
source("model_fit.R")
source("divergence_plots.R")
source("mcmc_post_analysis.R")
####################
df_PSCL4 <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/model3/data/interpolated_Ramsh_data2.csv")
df_PSCL4_real <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/model3/data/datos_squares.csv")
onset_real <- df_PSCL4_real$t
cum_cases_real <- df_PSCL4_real$infected
onset <- df_PSCL4$time
cum_cases <- as.integer(df_PSCL4$Interpolate_Ip)
cum_cases <- unlist(cum_cases, use.names = FALSE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# data_tomato <- load_data()
# onset <- data_tomato[[1]]
# cum_cases <- data_tomato[[3]]
#cum_cases <- unlist(cum_cases, use.names = FALSE)
#
N = length(onset) # Number of days observed throughout the outbreak
pop = 1000         # Plant Population
sample_time=1:N
#### SIR rstan model ####
model <- stan_model("SIR_Tomato3.stan")
#
#### mcmc parameters ####
n_chains <- 4
n_warmups <- 500
n_iter <- 25500
n_thin <- 50
set.seed(972198)
Tomato_data <- list(n_obs = N,
n_theta = 9,
n_difeq = 9,
n_pop = pop,
y = cum_cases,
t0 = 0,
ts = sample_time)
#parameters = c("y_init", "theta", "R_0")
parameters <- c("theta", "y_hat", "y_init", "R_0")
time.start_nuts <- Sys.time()
nuts_fit <-
sampling(model,
data = Tomato_data,
pars = parameters,
init = init_sir,
chains = n_chains,
warmup = n_warmups,
iter = n_iter,
thin = n_thin,
control = list(adapt_delta = 0.86)
)
#parameters = c("y_init", "theta", "R_0")
parameters = c("theta[1]","y_hat")#,"y_init", "R_0")
nuts_fit_summary <- summary(nuts_fit, pars = parameters)$summary
print(nuts_fit_summary,
scientific = FALSE,
digits = 4)
time.end_nuts <- Sys.time()
duration_nuts <- time.end_nuts - time.start_nuts
parameters = c("theta[1]", "y_hat", "y_init", "R_0")
#parameters = c("y_hat", "y_init", "R_0")
nuts_fit_summary <- summary(nuts_fit, pars = parameters)$summary
print(nuts_fit_summary,
scientific = FALSE,
digits = 4)
sub_path_1 <- "/home/gabrielsalcedo"
sub_path_2 <- "Documentos/TYLCVD-fit"
sub_path_3 <- "model3/runs"
prefix_time <- Sys.time()
prefix_time <- paste(as.Date(prefix_time),
hour(prefix_time),
minute(prefix_time), sep="_")
file_name <- paste("run-", prefix_time,".RData", sep="")
runs_path <-
paste(sub_path_1, sub_path_2, sub_path_3, file_name, sep = "/")
save.image(file=runs_path)
#
#### Post analysis ####
#
mcmcm_post_analysis(nuts_sample = nuts_fit)
#
### Model Fit ####
# Model fitted values across the observed time period
#
model_fit()
library(deSolve)
library(dplyr)
library(rstan)
library(gridExtra)
library(outbreaks)
library(bayesplot)
library(data.table)
library(knitr)
library(kableExtra)
library(tidyverse)
#source("load_data.R")
source("init_SIR.R")
source("mcmc_stain_summary.R")
source("model_fit.R")
source("divergence_plots.R")
source("mcmc_post_analysis.R")
####################
df_PSCL4 <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/model3/data/interpolated_Ramsh_data2.csv")
df_PSCL4_real <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/model3/data/datos_squares.csv")
onset_real <- df_PSCL4_real$t
cum_cases_real <- df_PSCL4_real$infected
onset <- df_PSCL4$time
cum_cases <- as.integer(df_PSCL4$Interpolate_Ip)
cum_cases <- unlist(cum_cases, use.names = FALSE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# data_tomato <- load_data()
# onset <- data_tomato[[1]]
# cum_cases <- data_tomato[[3]]
#cum_cases <- unlist(cum_cases, use.names = FALSE)
#
N = length(onset) # Number of days observed throughout the outbreak
pop = 1000         # Plant Population
sample_time=1:N
#### SIR rstan model ####
model <- stan_model("SIR_Tomato3.stan")
#
#### mcmc parameters ####
n_chains <- 4
n_warmups <- 500
n_iter <- 25500
n_thin <- 50
set.seed(972198)
Tomato_data <- list(n_obs = N,
n_theta = 9,
n_difeq = 9,
n_pop = pop,
y = cum_cases,
t0 = 0,
ts = sample_time)
#parameters = c("y_init", "theta", "R_0")
parameters <- c("theta", "y_hat", "y_init", "R_0")
time.start_nuts <- Sys.time()
nuts_fit <-
sampling(model,
data = Tomato_data,
pars = parameters,
init = init_sir,
chains = n_chains,
warmup = n_warmups,
iter = n_iter,
thin = n_thin,
control = list(adapt_delta = 0.86)
)
#parameters = c("y_init", "theta", "R_0")
parameters = c("theta[1]","y_hat")#,"y_init", "R_0")
nuts_fit_summary <- summary(nuts_fit, pars = parameters)$summary
print(nuts_fit_summary,
scientific = FALSE,
digits = 4)
time.end_nuts <- Sys.time()
duration_nuts <- time.end_nuts - time.start_nuts
parameters = c("theta[1]", "y_hat", "y_init", "R_0")
#parameters = c("y_hat", "y_init", "R_0")
nuts_fit_summary <- summary(nuts_fit, pars = parameters)$summary
print(nuts_fit_summary,
scientific = FALSE,
digits = 4)
sub_path_1 <- "/home/gabrielsalcedo"
sub_path_2 <- "Documentos/TYLCVD-fit"
sub_path_3 <- "model3/runs"
prefix_time <- Sys.time()
prefix_time <- paste(as.Date(prefix_time),
hour(prefix_time),
minute(prefix_time), sep="_")
file_name <- paste("run-", prefix_time,".RData", sep="")
runs_path <-
paste(sub_path_1, sub_path_2, sub_path_3, file_name, sep = "/")
save.image(file=runs_path)
#
#### Post analysis ####
#
mcmcm_post_analysis(nuts_sample = nuts_fit)
#
### Model Fit ####
# Model fitted values across the observed time period
#
model_fit()
