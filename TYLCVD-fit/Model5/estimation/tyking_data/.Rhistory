int x_i[1] = { N }; //formatting to feed the ODE function
real x_r[1] = {tswitch};
}
parameters {
real<lower=0> gamma; // SEIR parameters
real<lower=0> beta;
real<lower=0> a;
real<lower=0> phi_inv;
real<lower=0,upper=1> eta; // reduction in transmission due to control measures (in proportion of beta)
real<lower=0> nu; // shift of quarantine implementation (strictly positive as it can only occur after tswitch)
real<lower=0,upper=1> xi_raw; // slope of quarantine implementation (strictly positive as the logistic must be downward)
real<lower=0> i0; // number of infected people inititally
real<lower=0> e0; // number of exposed people inititally
real<lower=0, upper=1> p_reported; // probability for an infected person to be reported (i.e counted as a case)
}
transformed parameters{
real y[n_days, 4];
real incidence[n_days - 1];
real phi = 1. / phi_inv;
real xi = xi_raw + 0.5;
real theta[8];
real<lower=0, upper=1> p_infected_survey; //proportion of people having been infected at week 5 (between 4 and 7 may)
theta = {beta, gamma, a, eta, nu, xi, i0, e0};
y = integrate_ode_rk45(sir, rep_array(0.0, 4), t0, ts, theta, x_r, x_i);
for (i in 1:n_days-1){
incidence[i] = -(y[i+1, 2] - y[i, 2] + y[i+1, 1] - y[i, 1]) * p_reported; //-(E(t+1) - E(t) + S(t+1) - S(t))
}
// mean number of infected + recovered people during week 5
p_infected_survey = mean(to_vector(y[t_survey_start:t_survey_end, 4])) / N;
}
model {
//priors
beta ~ normal(2, 1);
gamma ~ normal(0.4, 0.5);
a ~ normal(0.4, 0.5);
phi_inv ~ exponential(5);
i0 ~ normal(0, 10);
e0 ~ normal(0, 10);
p_reported ~ beta(1, 2);
eta ~ beta(2.5, 4);
nu ~ exponential(1./5);
xi_raw ~ beta(1, 1);
//sampling distribution
n_infected_survey ~ binomial(n_tested_survey, p_infected_survey); // we fit the survey data to our latent parameter
//col(matrix x, int n) - The n-th column of matrix x. Here the number of infected people
cases[1:(n_days-1)] ~ neg_binomial_2(incidence, phi);
}
generated quantities {
real R0 = beta / gamma;
real Reff[n_days]; // R0 but taking into account environmental changes
real recovery_time = 1 / gamma;
real incubation_time = 1 / a;
real pred_cases[n_days-1];
pred_cases = neg_binomial_2_rng(incidence, phi);
for (i in 1:n_days)
Reff[i] = switch_eta(i, tswitch, eta, nu, xi) * beta / gamma;
}
rstan:::rstudio_stanc("Documentos/sier.stan")
rstan:::rstudio_stanc("Documentos/sier.stan")
#Data
library(outbreaks)
library(tidyverse)
theme_set(theme_bw())
ggplot(data = influenza_england_1978_school) +
geom_point(mapping = aes(x = date, y = in_bed)) +
labs(y = "Number of students in bed")
#Coding the Model: Stan Program
library(rstan)
library(gridExtra)
rstan_options (auto_write = TRUE)
options (mc.cores = parallel::detectCores ())
#Coding the ODE in Stan
#real[] f(real time, real[] state, real[] theta, real[] x_r, int[] x_i)
functions {
real switch_eta(real t, real t1, real eta, real nu, real xi) {
return(eta + (1 - eta) / (1 + exp(xi * (t - t1 - nu))));
}
real[] sir(real t, real[] y, real[] theta,
real[] x_r, int[] x_i) {
int N = x_i[1];
real tswitch = x_r[1];
real beta = theta[1];
real gamma = theta[2];
real a = theta[3];
real eta = theta[4]; // reduction in transmission rate after quarantine
real nu = theta[5]; // shift of quarantine implementation
real xi = theta[6]; // slope of quarantine implementation
real i0 = theta[7]; // initial number of infected people
real e0 = theta[8]; // initial number of infected people
real forcing_function = switch_eta(t,tswitch,eta,nu,xi); // switch function
real beta_eff = beta * forcing_function; // beta decreased to take control measures into account
real init[4] = {N - i0 - e0, e0, i0, 0}; // initial values
real S = y[1] + init[1];
real E = y[2] + init[2];
real I = y[3] + init[3];
real R = y[4] + init[4];
real dS_dt = -beta_eff * I * S / N;
real dE_dt =  beta_eff * I * S / N - a * E;
real dI_dt = a * E - gamma * I;
real dR_dt =  gamma * I;
return {dS_dt, dE_dt, dI_dt, dR_dt};
}
}
data {
int<lower=1> n_days;
real t0;
real tswitch; // date of introduction of control measures
real ts[n_days];
int N; // population size
int cases[n_days];
int t_survey_start; // antibody survey data
int t_survey_end;
int n_infected_survey;
int n_tested_survey;
}
transformed data {
int x_i[1] = { N }; //formatting to feed the ODE function
real x_r[1] = {tswitch};
}
parameters {
real<lower=0> gamma; // SEIR parameters
real<lower=0> beta;
real<lower=0> a;
real<lower=0> phi_inv;
real<lower=0,upper=1> eta; // reduction in transmission due to control measures (in proportion of beta)
real<lower=0> nu; // shift of quarantine implementation (strictly positive as it can only occur after tswitch)
real<lower=0,upper=1> xi_raw; // slope of quarantine implementation (strictly positive as the logistic must be downward)
real<lower=0> i0; // number of infected people inititally
real<lower=0> e0; // number of exposed people inititally
real<lower=0, upper=1> p_reported; // probability for an infected person to be reported (i.e counted as a case)
}
transformed parameters{
real y[n_days, 4];
real incidence[n_days - 1];
real phi = 1. / phi_inv;
real xi = xi_raw + 0.5;
real theta[8];
real<lower=0, upper=1> p_infected_survey; //proportion of people having been infected at week 5 (between 4 and 7 may)
theta = {beta, gamma, a, eta, nu, xi, i0, e0};
y = integrate_ode_rk45(sir, rep_array(0.0, 4), t0, ts, theta, x_r, x_i);
for (i in 1:n_days-1){
incidence[i] = -(y[i+1, 2] - y[i, 2] + y[i+1, 1] - y[i, 1]) * p_reported; //-(E(t+1) - E(t) + S(t+1) - S(t))
}
// mean number of infected + recovered people during week 5
p_infected_survey = mean(to_vector(y[t_survey_start:t_survey_end, 4])) / N;
}
model {
//priors
beta ~ normal(2, 1);
gamma ~ normal(0.4, 0.5);
a ~ normal(0.4, 0.5);
phi_inv ~ exponential(5);
i0 ~ normal(0, 10);
e0 ~ normal(0, 10);
p_reported ~ beta(1, 2);
eta ~ beta(2.5, 4);
nu ~ exponential(1./5);
xi_raw ~ beta(1, 1);
//sampling distribution
n_infected_survey ~ binomial(n_tested_survey, p_infected_survey); // we fit the survey data to our latent parameter
//col(matrix x, int n) - The n-th column of matrix x. Here the number of infected people
cases[1:(n_days-1)] ~ neg_binomial_2(incidence, phi);
}
generated quantities {
real R0 = beta / gamma;
real Reff[n_days]; // R0 but taking into account environmental changes
real recovery_time = 1 / gamma;
real incubation_time = 1 / a;
real pred_cases[n_days-1];
pred_cases = neg_binomial_2_rng(incidence, phi);
for (i in 1:n_days)
Reff[i] = switch_eta(i, tswitch, eta, nu, xi) * beta / gamma;
}
rstan:::rstudio_stanc("Documentos/sir_example.stan")
library(deSolve)
library(dplyr)
library(rstan)
library(outbreaks)
library(bayesplot)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
rstan:::rstudio_stanc("Documentos/sir_example.stan")
? .standard_regexps
?sampling
library("rstan")
?sampling
load("~/Documentos/TYLCVD-fit/model3/df_I_det_Poiss.Rda")
View(df_fit_I_1)
View(df_fit_I_1)
load("~/Documentos/TYLCVD-fit/model3/runs/run-2022-05-06_13_45.RData")
View(nuts_fit)
View(nuts_fit)
nuts_fit@inits[[1]][["y_hat"]]
nuts_fit@inits[[1]][["y_hat"]][7]
nuts_fit@inits[[1]][["y_hat"]][8]
nuts_fit@inits[[1]][["y_hat"]][,8]
nuts_fit@inits[[1]][["y_hat"]][,7]
load("~/Documentos/TYLCVD-fit/Model5/data/df_I_det_Poiss.Rda")
View(df_fit_CIS)
View(df_fit_CIS)
load("~/Documentos/TYLCVD-fit/Model5/data/df_I_det_Poiss.Rda")
View(df_fit_CIS)
load("~/Documentos/TYLCVD-fit/Model5/data/df_I_det_Poiss.Rda")
View(df_fit_CIS)
View(df_fit_CIS)
load("~/Documentos/TYLCVD-fit/Model5/runs/run-2022-05-10_22_1.RData")
View(nuts_fit)
View(nuts_fit)
View(nuts_fit)
View(nuts_fit)
nuts_fit
nuts_fit
load("~/Documentos/TYLCVD-fit/Model5/runs/run-2022-05-10_21_19.RData")
nuts_fit
str(nuts_fit)
fit = nuts_fit
posts <-  rstan::extract(nuts_fit)
posts
mod_diagnostics  <- rstan::get_sampler_params(nuts_fit)
posts$y_hat[, , 8]
fit_CIS <- posts$y_hat[, , 7]
fit_CIS <- posts$y_hat[, , 8]
fit_SIR <- fit_CIS
median_I = apply(fit_SIR, 2, median)
low_I = apply(fit_SIR, 2, quantile, probs = c(0.025))
high_I = apply(fit_SIR, 2, quantile, probs = c(0.975))
median_I
library(dplyr)
library(dplyr)
library(tidyverse)
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/interpolated_Ramsh_data.csv")
ip <- df$Interpolate_Ip
diff(ip)
ip_diff<-diff(ip)
plot(ip_diff)
length(ip)
length(ip_diff)
ip_diff<-diff(df)
ip
ip_diff
plot(ip)
plot(ip_diff)
t <- df$Time
plot(t, ip)
t
plot(t[2:],ip_diff)
plot(t[2:49],ip_diff)
t[2:49]
t[2:50]
t[2:51]
t[2:49]
plot(t[2:50],ip_diff)
Time <- t[2:50]
Time
Data.df <- data.frame(Time = Time, Interpolate_Ip = ip_diff)
Data.df
write_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_data.csv",Data.df)
write_csv(Data.df,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_data.csv")
library(dplyr)
library(tidyverse)
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/interpolated_Ramsh_data.csv")
t <- df$time
ip <- df$Interpolate_Ip
ip_diff<-diff(df)
plot(t, ip)
plot(t[2:50],ip_diff)
length(ip)
length(ip_diff)
Time <- t[2:]
Data.df <- data.frame(Time = Time, Interpolate_Ip = ip_diff)
write_csv(Data.df,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_data.csv")
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/interpolated_Ramsh_data.csv")
t <- df$time
ip <- df$Interpolate_Ip
ip
plot(t, ip)
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/interpolated_Ramsh_data.csv")
df
t <- df$time
ip <- df$Interpolate_Ip
plot(t, ip)
plot(t[2:50],ip_diff)
length(ip)
length(ip_diff)
Time <- t[2:]
Data.df <- data.frame(Time = Time, Interpolate_Ip = ip_diff)
length(ip)
length(ip_diff)
Time <- t[2:]
t[end]
t[-1]
t[-]
t[-1]
t[50]
t[51]
Time <- t[2:49]
Data.df <- data.frame(Time = Time, Interpolate_Ip = ip_diff)
Time <- t[1:49]
Data.df <- data.frame(Time = Time, Interpolate_Ip = ip_diff)
write_csv(Data.df,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_data.csv")
Data.df[400]
Data.df[40]
Data.df[40,]
Data.df[41,]
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/interpolated_data.csv")
t <- df$time
ip <- df$Interpolate_Ip
plot(t, ip)
ip_diff<-diff(df)
plot(t, ip)
plot(t[2:50],ip_diff)
length(ip)
length(ip_diff)
Data.df[41,]
ip
ip[41]
ip[40]
ip[41]
ip[42]
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/interpolated_data.csv")
t <- df$time
ip <- df$Interpolate_Ip
ip_diff<-diff(df)
plot(t, ip)
plot(t[2:50],ip_diff)
length(ip)
length(ip_diff)
Data.df <- data.frame(Time = t, Interpolate_Ip = ip_diff)
Data.df <- data.frame(Time = t[2:50], Interpolate_Ip = ip_diff)
write_csv(Data.df,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_data.csv")
ip
ip_diff<-diff(ip)
plot(t, ip)
plot(t[2:50],ip_diff)
ip_diff
length(ip)
length(ip_diff)
Data.df <- data.frame(Time = t[2:50], Interpolate_Ip = ip_diff)
write_csv(Data.df,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_data.csv")
plot(t[2:50],ip_diff, type = l)
plot(t[2:50],ip_diff, type = "l")
library(dplyr)
library(tidyverse)
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/interpolated_Ramsh_data.csv")
t <- df$time
ip <- df$Interpolate_Ip
ip_diff<-diff(ip)
plot(t, ip)
plot(t[2:50],ip_diff, type = "l")
length(ip)
length(ip_diff)
Data.df <- data.frame(Time = t[2:50], Interpolate_Ip = ip_diff)
write_csv(Data.df,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_data.csv")
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/Ramsh.csv")
t <- df$time
ip <- df$Interpolate_Ip
ip_diff<-diff(ip)
plot(t, ip)
plot(t[2:50],ip_diff, type = "l")
length(ip)
length(ip_diff)
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/Ramsh.csv")
t <- df$t
ip <- df$y
ip_diff<-diff(ip)
plot(t, ip)
plot(t[2:50],ip_diff, type = "l")
plot(t,ip_diff, type = "l")
t
ip_diff
plot(t[2:8],ip_diff, type = "l")
plot(t[2:8],ip_diff, type = "o")
len =length(t)
Data.df <- data.frame(Time = t[2:50], y_incidence = ip_diff)
write_csv(Data.df,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_real_data.csv")
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/Ramsh.csv")
df
t <- df$t
ip <- df$y
ip_diff<-diff(ip)
plot(t, ip)
len =length(t)
plot(t[2:len],ip_diff, type = "o")
ip_diff
ip
plot(t[2:len],ip_diff, type = "o")
length(ip)
length(ip_diff)
Data.df <- data.frame(Time = t[2:50], y_incidence = ip_diff)
write_csv(Data.df,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_real_data.csv")
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/Ramsh.csv")
t <- df$t
ip <- df$y
ip_diff<-diff(ip)
plot(t, ip)
len =length(t)
plot(t[2:len],ip_diff, type = "o")
length(ip)
length(ip_diff)
Data.df <- data.frame(Time = t[2:50], y_incidence = ip_diff)
write_csv(Data.df,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_real_data.csv")
Time <- t[2:50]
Data <- data.frame(Time = Time, y_incidence = ip_diff)
write_csv(Data.df,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_real_data.csv")
library(dplyr)
library(tidyverse)
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/Ramsh.csv")
t <- df$t
ip <- df$y
ip_diff<-diff(ip)
plot(t, ip)
len =length(t)
plot(t[2:len],ip_diff, type = "o")
length(ip)
length(ip_diff)
Time <- t[2:50]
Data <- data.frame(Time = Time, y_incidence = ip_diff)
write_csv(Data,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/incidence_real_data.csv")
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/interpolated_Ramsh_data.csv")
t <- df$t
ip <- df$y
ip_diff<-diff(ip)
plot(t, ip)
len =length(t)
plot(t[2:len],ip_diff, type = "o")
length(ip)
length(ip_diff)
df <- read_csv("/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/data/interpolated_Ramsh_data.csv")
df
t <- df$time
ip <- df$Interpolate_Ip
ip_diff<-diff(ip)
plot(t, ip)
len =length(t)
len =length(time)
plot(t[2:len],ip_diff, type = "o")
plot(time[2:len],ip_diff, type = "o")
plot(t, ip)
ip_diff<-diff(ip)
length(ip_diff)
len
len =length(t)
len
plot(t[2:len],ip_diff, type = "o")
library(deSolve)
library(dplyr)
library(rstan)
library(outbreaks)
library(bayesplot)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
knitr::opts_chunk$set(cache = TRUE, echo = TRUE, message = FALSE, warning = FALSE)
onset <- influenza_england_1978_school$date
cases <- influenza_england_1978_school$in_bed  #Number of students in bed
N = length(onset) # Number of days observed throughout the outbreak
pop = 763         # Population
sample_time=1:N
# Modify data into a form suitable for Stan
flu_data = list(n_obs = N,
n_theta = 2,
n_difeq = 3,
n_pop = pop,
y = cases,
t0 = 0,
ts = sample_time)
# Specify parameters to monitor
parameters = c("y_hat", "y_init", "theta",  "R_0")  #deterministic models (Model 1, Model 2)
parameters_stoch = c("y_hat", "y_init", "theta", "kappa", "lambda", "phi", "s_sq", "sigma", "R_0")  #stochastic model (Model 3)
load("~/Documentos/TYLCVD-fit/Model5/df_I_det_Poiss_vb.Rda")
View(df_fit_I_vb_1)
load("~/Documentos/TYLCVD-fit/Model5/estimation/tyking_data/df_I_det_Poiss.Rda")
setwd("~/Documentos/TYLCVD-fit/Model5/estimation/tyking_data")
dataFrame <- df_fit_CIS
dataFrame <- data.frame(df_fit_CIS)
dataFrame
library(dplyr)
library(tidyverse)
write_csv(dataFrame,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/estimation/tyking_data/NegBintyking_data.csv")
write_csv(dataFrame,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/estimation/tyking_data/NegBin_tyking_data.csv")
dataFrameReal <- data.frame(load('data_real.Rda'))
write_csv(dataFrameReal,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/estimation/tyking_data/tyking_real_data.csv")
dataFrame
dataFrame[,1:2]
dataFrame[,1:3]/1000
dataFrame <- data.frame(df_fit_CIS)
dataFrame[,1:3] <- dataFrame[,1:3]/1000
dataFrame
dataFrameReal
load("~/Documentos/TYLCVD-fit/Model5/estimation/tyking_data/data_real.Rda")
View(df_sample_N_real)
dataFrameReal <- data.frame(df_sample_N_real)
dataFrameReal
dataFrameReal[,1]
dataFrameReal[,2]
dataFrameReal <- dataFrameReal[,2]/1000
dataFrameReal
dataFrameReal
df_sample_N_rea
df_sample_N_real
df_sample_N_real$dates_real
dataFrame <- data.frame(df_fit_CIS)
dataFrame[,1:3] <- dataFrame[,1:3]/1000
dataFrame
dataFrameReal <- data.frame(df_sample_N_real)
dataFrameReal[,2] <- dataFrameReal[,2]/1000
dataFrameReal
dataFrameReal <- data.frame(df_sample_N_real)
dataFrameReal
dataFrameReal[,1] <- dataFrameReal[,1]/1000
dataFrameReal
write_csv(dataFrameReal,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/estimation/tyking_data/tyking_real_data.csv")
write_csv(dataFrame,"/home/gabrielsalcedo/Documentos/TYLCVD-fit/Model5/estimation/tyking_data/NegBin_tyking_data.csv")
